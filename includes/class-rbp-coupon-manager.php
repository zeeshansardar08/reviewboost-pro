<?php
if ( ! defined( 'ABSPATH' ) ) exit; // Exit if accessed directly

/**
 * ReviewBoost Pro - Coupon Manager
 * Handles coupon generation, rule evaluation, code templating, delivery, and logging.
 */
class RBP_Coupon_Manager {
    /**
     * Singleton instance
     */
    private static $instance = null;

    /**
     * Constructor
     */
    public function __construct() {
        add_action('woocommerce_coupon_used', [ $this, 'handle_coupon_redeemed' ], 10, 2);
    }

    /**
     * Get singleton instance
     */
    public static function instance() {
        if ( self::$instance === null ) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    /**
     * Evaluate if a coupon should be generated for a review
     * @param array $context Contains keys: 'rating', 'order_total', 'order_id', 'user_id', 'review_id', etc.
     * @return bool
     */
    public function evaluate_coupon_rules( $context ) {
        $min_rating = absint( get_option('rbp_pro_coupon_min_rating', 0) );
        $min_order_total = floatval( get_option('rbp_pro_coupon_min_order_total', 0 ) );

        if ( $min_rating && (!isset($context['rating']) || intval($context['rating']) < $min_rating) ) {
            return false;
        }
        if ( $min_order_total && (!isset($context['order_total']) || floatval($context['order_total']) < $min_order_total) ) {
            return false;
        }
        // Add more rules here as needed
        return true;
    }

    /**
     * Generate a unique coupon code using a template
     * @param int $user_id
     * @param int $review_id
     * @return string
     */
    public function generate_unique_coupon_code( $user_id, $review_id ) {
        $template = get_option('rbp_pro_coupon_code_template', 'REVIEW-{ORDER_ID}-{RAND}');
        $order_id = isset($user_id) ? $user_id : '';
        $rand = strtoupper(wp_generate_password(6, false, false));
        $code = str_replace(
            ['{ORDER_ID}', '{REVIEW_ID}', '{RAND}'],
            [$order_id, $review_id, $rand],
            $template
        );
        // Ensure uniqueness
        while ( wc_get_coupon_id_by_code( $code ) ) {
            $rand = strtoupper(wp_generate_password(6, false, false));
            $code = str_replace(
                ['{ORDER_ID}', '{REVIEW_ID}', '{RAND}'],
                [$order_id, $review_id, $rand],
                $template
            );
        }
        return sanitize_text_field( $code );
    }

    /**
     * Create the coupon post and meta
     * @param string $coupon_code
     * @param array $args
     * @return int|false Coupon post ID or false
     */
    public function create_coupon( $coupon_code, $args = [] ) {
        $no_expiry = get_option('rbp_pro_coupon_no_expiry', 0);
        $fixed_expiry = get_option('rbp_pro_coupon_fixed_expiry', '');
        if ($no_expiry) {
            $expiry_date = '';
        } elseif ($fixed_expiry) {
            $expiry_date = $fixed_expiry;
        } else {
            $expiry_days = absint( get_option('rbp_pro_coupon_expiry_days', 7) );
            $expiry_date = date('Y-m-d', strtotime(
                "+$expiry_days days",
                current_time('timestamp')
            ));
        }

        $coupon_args = array_merge([
            'post_title'   => $coupon_code,
            'post_name'    => $coupon_code,
            'post_status'  => 'publish',
            'post_type'    => 'shop_coupon',
        ], $args);
        $coupon_id = wp_insert_post( $coupon_args );
        if ( ! $coupon_id ) return false;

        update_post_meta( $coupon_id, 'discount_type', get_option('rbp_pro_coupon_type', 'fixed_cart') );
        update_post_meta( $coupon_id, 'coupon_amount', get_option('rbp_pro_coupon_amount', 5) );
        update_post_meta( $coupon_id, 'minimum_amount', get_option('rbp_pro_coupon_min_spend', 0) );
        update_post_meta( $coupon_id, 'usage_limit', get_option('rbp_pro_coupon_usage_limit', 1) );
        if ($expiry_date) {
            update_post_meta( $coupon_id, 'date_expires', $expiry_date );
        } else {
            delete_post_meta( $coupon_id, 'date_expires' );
        }
        // Custom meta for tracking
        if ( isset($args['_rbp_coupon_for_review']) ) {
            update_post_meta( $coupon_id, '_rbp_coupon_for_review', $args['_rbp_coupon_for_review'] );
        }
        if ( isset($args['_rbp_coupon_for_user']) ) {
            update_post_meta( $coupon_id, '_rbp_coupon_for_user', $args['_rbp_coupon_for_user'] );
        }
        return $coupon_id;
    }

    /**
     * Handle coupon redemption event and log if generated by ReviewBoost Pro
     * @param string $coupon_code
     * @param WC_Order $order
     */
    public function handle_coupon_redeemed( $coupon_code, $order ) {
        $coupon_id = wc_get_coupon_id_by_code( $coupon_code );
        if ( ! $coupon_id ) return;
        if ( ! get_post_meta( $coupon_id, '_rbp_coupon_for_review', true ) ) return;
        $customer_id = $order instanceof WC_Order ? $order->get_customer_id() : 0;
        $this->log_coupon_event( $customer_id, 'redeemed', [ 'coupon_code' => $coupon_code, 'order_id' => $order instanceof WC_Order ? $order->get_id() : 0 ] );
    }

    /**
     * Send coupon to customer (email, with hooks for WhatsApp/SMS)
     * @param string $coupon_code
     * @param int $user_id
     * @param string $email
     * @param string $expiry_date
     * @param array $extra Extra data (optional)
     */
    public function send_coupon_to_customer( $coupon_code, $user_id, $email, $expiry_date, $extra = [] ) {
        $customer = get_userdata( $user_id );
        $customer_name = $customer ? $customer->display_name : '';
        /* translators: Coupon email template */
        $tpl = get_option('rbp_pro_coupon_email_template', __( 'Thank you for your review! Here is your coupon code: [coupon_code]', 'reviewboost-pro' ) );
        $body = str_replace( [ '[customer_name]', '[coupon_code]', '[expiry_date]' ], [ $customer_name, $coupon_code, $expiry_date ], $tpl );
        $headers = [ 'Content-Type: text/html; charset=UTF-8' ];
        wp_mail( $email, __( 'Your Coupon for Reviewing', 'reviewboost-pro' ), $body, $headers );

        /**
         * Fires after a coupon is sent, for other channels (WhatsApp, SMS, etc)
         * @param string $coupon_code
         * @param int $user_id
         * @param string $email
         * @param string $expiry_date
         * @param array $extra
         */
        do_action('rbp_coupon_sent', $coupon_code, $user_id, $email, $expiry_date, $extra);
    }

    /**
     * Log coupon event
     */
    public function log_coupon_event( $customer_id, $event, $data = [] ) {
        if ( get_option('rbp_pro_coupon_log_enabled', 1) ) {
            RBP_Logger::log_event( 0, $customer_id, 'coupon', current_time( 'mysql' ), $event, 0, $data );
        }
    }
}
